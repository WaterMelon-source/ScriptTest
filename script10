-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

-- Global Configuration
getgenv().cleanTrash = true
getgenv().checkNpcs = true
getgenv().Bins = true
getgenv().Door = true
getgenv().serveNpcs = true
getgenv().flight = player.configurations.flight.Value

-- Helper Function to Clean Trash from NPCs
local function CleanTrash(v)
    for i = 1,2 do
        local items = {"nut_mix", "chips", "cookies", "bread_roll", "coffee", "water", "coca_cola"}
        for _, item in pairs(items) do
            if v:FindFirstChild(item) then
                player.Character.Client.Client.RemoteEvent:FireServer("Trash", getgenv().plane.npcs:FindFirstChild(v.Name), item)
            end
        end
    end
end

-- Helper Function to Fix NPCs Animations
local function FixNpcs(v)
    wait(0.1)
    if not v.animations.buckle_seatbelt.Value or v.animations.unbuckle_seatbelt.Value then
        player.Character.Client.Client.RemoteEvent:FireServer("Fix", "seatbelt", v)
    end
    if not v.animations.close_tray.Value or v.animations.open_tray.Value then
        player.Character.Client.Client.RemoteEvent:FireServer("Fix", "tray", v)
    end
end

-- Helper Function to Open or Close Overhead Bins
local function Bins(v, status)
    local targetRotation = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    local isClosed = v[v.Name].rotationRef.Value == targetRotation
    if (not isClosed and status == "close") or (isClosed and status == "open") then
        wait(0.1)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(v.CFrame.X, v.CFrame.Y - 3, v.CFrame.Z)
        fireproximityprompt(v.ProximityPrompt)
    end
end

-- Helper Function to Serve NPCs
local function Serve(v)
    player.Character.Client.Client.RemoteEvent:FireServer("Ask", "beverage", getgenv().plane.npcs:FindFirstChild(v.Name))
    wait(2)

    local function serveItemIfRequested(itemName, itemCategory, itemIndex)
        if v.Head.Chat:FindFirstChild("Message") and string.find(v.Head.Chat.Message.TextLabel.Text, itemName) then
            player.Character.Client.Client.RemoteFunction:InvokeServer("GetItem", itemCategory, "economy", itemIndex)
            player.Character.Client.Client.RemoteFunction:InvokeServer("GiveItem", getgenv().plane.npcs:FindFirstChild(v.Name))
        end
    end

    serveItemIfRequested("Water", "beverage", 1)
    serveItemIfRequested("Coffee", "beverage", 2)
    serveItemIfRequested("Coca Cola", "beverage", 3)
    
    player.Character.Client.Client.RemoteEvent:FireServer("Ask", "food", getgenv().plane.npcs:FindFirstChild(v.Name))
    wait(3)

    serveItemIfRequested("Chips", "food", 1)
    serveItemIfRequested("Nut Mix", "food", 4)
    serveItemIfRequested("Cookies", "food", 8)
    serveItemIfRequested("Bread Roll", "food", 10)
end

-- Main Execution Block
if getgenv().flight then
    print(getgenv().flight)
    local workspace_flight = workspace.flights:FindFirstChild(getgenv().flight)
    local replicatedStorage_flight = ReplicatedStorage.flights:FindFirstChild(getgenv().flight)

    if workspace_flight and replicatedStorage_flight then
        local flight_status = replicatedStorage_flight.flight_status.Value
        local status_folder = replicatedStorage_flight.status:FindFirstChild(flight_status)
        getgenv().plane = workspace_flight.clientFolder:GetChildren()[1]
        print(getgenv().plane.Name)

        if flight_status == "departure" then
            if getgenv().checkNpcs and not status_folder.passengers_checked.Value and status_folder.passengers_seated.Value then
                for _, v in pairs(getgenv().plane.clientNpcs:GetChildren()) do
                    CleanTrash(v)
                end
            end
            if getgenv().Door and not status_folder.door_closed.Value then
                player.Character.HumanoidRootPart.CFrame = getgenv().plane.doors.Door.Handle.CFrame
                fireproximityprompt(getgenv().plane.doors.Door.Handle.ProximityPrompt)
            end
            if getgenv().Bins and not status_folder.overhead_bins_closed.Value then
                for _, v in pairs(getgenv().plane.overhead_bins:GetChildren()) do
                    Bins(v, "close")
                end
            end
            if getgenv().checkNpcs and not status_folder.passengers_checked.Value then
                for _, v in pairs(getgenv().plane.npcs:GetChildren()) do
                    FixNpcs(v)
                end
            end
        elseif flight_status == "cruising" then
            if getgenv().serveNpcs and not status_folder.serving_finished.Value and status_folder.serving_started.Value then
                for _, v in pairs(getgenv().plane.clientNpcs:GetChildren()) do
                    Serve(v)
                end
            end
            if getgenv().cleanTrash and not status_folder.trash_collected.Value then
                for _, v in pairs(getgenv().plane.clientNpcs:GetChildren()) do
                    CleanTrash(v)
                end
            end
            if getgenv().checkNpcs and not status_folder.passengers_checked.Value then
                for _, v in pairs(getgenv().plane.npcs:GetChildren()) do
                    FixNpcs(v)
                end
            end
        elseif flight_status == "arrival" then
            if getgenv().Bins and not status_folder.overhead_bins_opened.Value then
                for _, v in pairs(getgenv().plane.overhead_bins:GetChildren()) do
                    Bins(v, "open")
                end
            end
        end
    else
        warn("Flight " .. getgenv().flight .. " not found")
    end
else
    warn("No flight specified in player configurations")
end
